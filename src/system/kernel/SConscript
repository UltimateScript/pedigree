'''
Copyright (c) 2008-2014, Pedigree Developers

Please see the CONTRIB file in the root of the source tree for a full
list of contributors.

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'''

import os

Import(['env'])

# Take a copy of the SCons environment as we tweak flags.
env_clone = env.Clone()

kerneldir = env["PEDIGREE_BUILD_KERNEL"]
imagesdir = env["PEDIGREE_IMAGES_DIR"]
builddir = env["PEDIGREE_BUILD_BASE"]
objname = os.path.join(kerneldir, 'kernel')

env.Alias("kernel", objname)

# Base set of kernel files, common to all architectures.
files = [
    'Log.cc',
    os.path.join(builddir, 'Version.cc'),
    'Archive.cc',
    'Spinlock.cc',
    'Subsystem.cc',
    'ServiceManager.cc',
    'Service.cc',
    Glob('utilities/*.cc'),
    Glob('utilities/sha1/*.cc'),
    Glob('utilities/md5/*.cc'),
    Glob('machine/*.cc'),
    Glob('linker/*.cc'),
    Glob('core/*.cc'),
    Glob('core/process/*.cc'),
    Glob('core/processor/*.cc'),
    Glob('core/lib/*.cc'),
    Glob('core/lib/*.c'),
    Glob('config/*.cc'),
    Glob('network/*.cc'),
    Glob('graphics/*.cc'),
]

# Static drivers build all drivers directly into the kernel rather than building
# them as actual modules.
if 'STATIC_DRIVERS' in env['CPPDEFINES']:
    files += env['INITRD_LIST']

# The debugger creates its own set of unique dependencies that must be handled.
if env['debugger']:
    files += [
        Glob('debugger/*.cc'),
        Glob('debugger/commands/*.cc')
    ]
else:
    files += [
        Glob('debugger/panic.cc'),
        Glob('debugger/SerialIO.cc'),
        Glob('debugger/LocalIO.cc'),
        Glob('debugger/DebuggerIO.cc'),
    ]

include_dirs = [
    '#/src/system/include',
    '#/src/modules/system',
    '#/src/modules',
    'debugger/',
    'debugger/commands/',
    'debugger/libudis86/',
    'linker/',
    'core/',
    'core/lib/',
    '.'
]

#####################################
# Machine-specific files.
#####################################
if env['mach_pc']:
    files += [
        Glob('machine/mach_pc/*.cc'),
        'machine/mach_pc/x86emu/debug.c',
        'machine/mach_pc/x86emu/decode.c',
        'machine/mach_pc/x86emu/fpu.c',
        'machine/mach_pc/x86emu/ops.c',
        'machine/mach_pc/x86emu/ops2.c',
        'machine/mach_pc/x86emu/prim_ops.c',
        'machine/mach_pc/x86emu/sys.c',
    ]

    include_dirs += ['machine/mach_pc/x86_emu/x86emu']
elif env['arm_versatile']:
    files += [
        Glob('machine/arm_versatile/*.cc'),
    ]

    include_dirs += ['machine/arm_versatile']
elif 'PPC_COMMON' in env['CPPDEFINES']:
    files += [Glob('machine/ppc_common/*.cc')]

    if 'PPC_MAC' in env['CPPDEFINES']:
        files += [
            Glob('machine/mac/*.cc'),
            Glob('machine/mac/*.c'),
        ]

    if 'OPENFIRMWARE' in env['CPPDEFINES']:
        files += [
            Glob('machine/openfirmware/*.cc'),
            Glob('machine/openfirmware/*.c'),
        ]
elif env['arm_beagle']:
    files += [
        Glob('machine/arm_beagle/*.cc'),
        Glob('machine/arm_beagle/*.c'),
    ]

#####################################
# Architecture-specific files
#####################################
if 'X86_COMMON' in env['CPPDEFINES']:
    commonFiles = Glob('core/processor/x86_common/*.cc')

    if env['debugger']:
        files += [Glob('debugger/libudis86/*.c')]
        files += commonFiles
    else:
        files += [x for x in commonFiles
                  if x.path not in [
                      env.File('core/processor/x86_common/Disassembler.cc').path
                  ]]

    if env['ARCH_TARGET'] == 'X86':
        files += [
            Glob('core/processor/x86/*.cc'),
            'core/processor/x86/asm/boot-standalone.s',
            'core/processor/x86/asm/InterruptManager.s',
            'core/processor/x86/asm/Processor.s',
            'core/processor/x86/asm/Scheduler.s',
        ]

        if env['multiprocessor']:
            files += ['core/processor/x86/asm/trampoline.s']
    elif env['ARCH_TARGET'] == 'X64':
        files += [
            Glob('core/processor/x64/*.cc'),
            'core/processor/x64/asm/boot-standalone.s',
            'core/processor/x64/asm/InterruptManager.s',
            'core/processor/x64/asm/SyscallManager.s',
            'core/processor/x64/asm/Processor.s',
            'core/processor/x64/asm/Scheduler.s',
            'core/processor/x64/asm/gdt.s'
        ]
elif env['arm_9']:
    files += [
        Glob('core/processor/arm_926e/*.cc'),
        Glob('core/processor/arm_926e/asm/*.S'),
    ]
elif env['armv7']:
    files += [
        Glob('core/processor/armv7/*.cc'),
        Glob('core/processor/armv7/asm/*.S'),
    ]
elif 'PPC_COMMON' in env['CPPDEFINES']:
    if 'PPC32' in env['CPPDEFINES']:
        files += [
            Glob('core/processor/ppc32/*.cc'),
            Glob('core/processor/ppc32/asm/*.s'),
        ]

    files += Glob('core/processor/ppc_common/*.cc')

# Generic ARM bits.
if env['ARCH_TARGET'] == 'ARM':
    files += [
        'boot-arm.cc',
        Glob('core/processor/arm_common/*.cc'),
    ]

# Set flags in the cloned environment for the build.
env_clone['CPPPATH'] = include_dirs
env_clone['LIBS'] = ['gcc']
env_clone['LIBPATH'] = ['#', os.path.join(imagesdir, 'libraries')]

final_output = objname
stripped_objname = final_output
objname = '%s.debug' % objname

if env['ARCH_TARGET'] == 'X64':
    # TODO(miselin): this is not brilliant.
    env_clone.MergeFlags({'LINKFLAGS': ['-m64', '-mcmodel=kernel']})
    stripped_objname = '%s.stripped' % (objname,)

env_clone.Program(objname, files)
env_clone.Command(stripped_objname, objname,
                  action="%s -d -o $TARGET $SOURCE" % env['STRIP'])

if final_output != stripped_objname:
    action = "%s -I elf64-x86-64 -O elf32-i386 $SOURCE $TARGET" % env['OBJCOPY']
    env_clone.Command(final_output, stripped_objname, action=action)
