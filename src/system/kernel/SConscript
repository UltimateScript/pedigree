'''
Copyright (c) 2008-2014, Pedigree Developers

Please see the CONTRIB file in the root of the source tree for a full
list of contributors.

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'''

import itertools
import os

import buildutils.misc

Import(['env'])

# Take a copy of the SCons environment as we tweak flags.
env_clone = env.Clone()
env_clone['LIBS'] = []

kerneldir = env["PEDIGREE_BUILD_KERNEL"]
imagesdir = env["PEDIGREE_IMAGES_DIR"]
builddir = env["PEDIGREE_BUILD_BASE"]
objname = kerneldir.File('kernel')
kernel_so = kerneldir.File('libkernel.so')

env.Alias("kernel", objname)

# Instrument the kernel.
if env['instrumentation']:
    env_clone.MergeFlags({
        'CCFLAGS': ['-finstrument-functions'],
        'CPPDEFINES': ['INSTRUMENTATION'],
    })

# Special define for code that is compiled for user and kernel space.
# We also make sure to mark all static library symbols linked to the kernel as
# hidden on the way in so their visibility can be properly controlled.
env_clone.MergeFlags({
    'CPPDEFINES': ['IN_PEDIGREE_KERNEL'],
    'LINKFLAGS': ['-Wl,--discard-all'],
})

if env['lto']:
    env_clone.MergeFlags({
        'CCFLAGS': ['-flto'],
        'LINKFLAGS': ['-flto'],
    })

# Base set of kernel files, common to all architectures.
core_lib_dir = env.Dir('core').Dir('lib')
files = [
    env.File('Log.cc'),
    env.File('SerialLog.cc'),
    builddir.File('Version.cc'),
    env.File('Archive.cc'),
    env.File('Atomic.cc'),
    env.File('Spinlock.cc'),
    env.File('Subsystem.cc'),
    env.File('ServiceManager.cc'),
    env.File('ServiceFeatures.cc'),
    env.File('Service.cc'),
    env.File('syscallError.cc'),
    env.File('LockGuard.cc'),
    env.Dir('utilities').glob('*.cc'),
    env.Dir('machine').glob('*.cc'),
    env.Dir('linker').glob('*.cc'),
    env.Dir('core').glob('*.cc'),
    env.Dir('core').Dir('process').glob('*.cc'),
    env.Dir('core').Dir('processor').glob('*.cc'),
    core_lib_dir.File('cppsupport.cc'),
    core_lib_dir.File('demangle.cc'),
    core_lib_dir.File('instrument.cc'),
    core_lib_dir.glob('*.c'),
    env.Dir('config').glob('*.cc'),
    env.Dir('network').glob('*.cc'),
    env.Dir('graphics').glob('*.cc'),
    env.Dir('time').glob('*.cc'),
]

if env['debug_allocator']:
    files.append(core_lib_dir.File('DebugAllocator.cc'))
else:
    files.append(core_lib_dir.File('SlamAllocator.cc'))

# Static drivers build all drivers directly into the kernel rather than building
# them as actual modules.
if 'STATIC_DRIVERS' in env['CPPDEFINES']:
    files += env['INITRD_LIST']

# The debugger creates its own set of unique dependencies that must be handled.
if env['debugger']:
    files += [
        env.Dir('debugger').glob('*.cc'),
        env.Dir('debugger').Dir('commands').glob('*.cc'),
    ]
else:
    files += [
        env.File('debugger/panic.cc'),
        env.File('debugger/SerialIO.cc'),
        env.File('debugger/LocalIO.cc'),
        env.File('debugger/DebuggerIO.cc'),
    ]

include_dirs = [
    env.Dir('#src'),
    env.Dir('#src/system/include'),
    '.',  # for includes to e.g. x86_common etc
]

# Pull in machine implementation.
mach_dir = env.Dir('machine').Dir(env['MACH_DIR'])
files += [
    mach_dir.glob('*.cc'),
    mach_dir.glob('*.c'),
]

# Pull in headers for machine implementation.
include_dirs += [
    mach_dir,
]

# Add x86 emulator (for real-mode BIOS calls).
if env['ARCH_TARGET'] in ['X86', 'X64']:
    x86emu_dir = mach_dir.Dir('x86emu')
    x86emu_files = [
        x86emu_dir.File('debug.c'),
        x86emu_dir.File('decode.c'),
        x86emu_dir.File('fpu.c'),
        x86emu_dir.File('ops.c'),
        x86emu_dir.File('ops2.c'),
        x86emu_dir.File('prim_ops.c'),
        x86emu_dir.File('sys.c'),
    ]

    include_dirs += [
        x86emu_dir.Dir('x86emu'),
    ]

    # Quiet down x86emu's warnings, it's not our code.
    x86emu_env = env_clone.Clone()
    x86emu_env.MergeFlags({
        'CCFLAGS': ['-w'],
    }, unique=0)
    libx86emu = x86emu_env.StaticLibrary('x86emu', x86emu_files)

    env_clone['LIBS'] += [libx86emu]
elif env['ARCH_TARGET'] in ['HOSTED']:
    # HOSTED pulls in the X86 disassembler.
    files += ['core/processor/x86_common/Disassembler.cc']

# Pull in architecture implementation.
processor_dir = env.Dir('core').Dir('processor').Dir(env['ARCH_DIR'])
files += [
    processor_dir.glob('*.cc'),
    processor_dir.glob('*.c'),
    processor_dir.Dir('asm').glob('*.s'),
    processor_dir.Dir('asm').glob('*.S'),
]

# Pull in a sub-architecture implementation if it exists.
if env['SUBARCH_DIR']:
    processor_subarch_dir = env.Dir('core').Dir('processor').Dir(env['SUBARCH_DIR'])
    files += [
        processor_subarch_dir.glob('*.cc'),
        processor_subarch_dir.glob('*.c'),
        processor_subarch_dir.Dir('asm').glob('*.s'),
        processor_subarch_dir.Dir('asm').glob('*.S'),
    ]

# Set flags in the cloned environment for the build.
env_clone['CPPPATH'] = include_dirs
env_clone['LIBS'] += ['gcc']
if not env['hosted']:  # Don't let the kernel link against Pedigree .so objects
    env_clone['LIBPATH'] = ['#', imagesdir.Dir('libraries')]

# Always pull in libudis86, even if we don't build the rest of the debugger
# Also disable warnings, as it's not our code.
ext_libs_env = env_clone.Clone()
ext_libs_env.MergeFlags({
    'CCFLAGS': ['-w'],
}, unique=0)
udis_files = [
    env.Dir('debugger').Dir('libudis86').glob('*.c'),
]
libudis86 = ext_libs_env.StaticLibrary('udis86', udis_files)
env_clone['LIBS'] += [libudis86]

hash_files = [
    env.Dir('utilities').Dir('sha1').glob('*.cc'),
    env.Dir('utilities').Dir('md5').glob('*.cc'),
    env.Dir('utilities').Dir('smhasher').glob('*.cpp'),
]
libhash = ext_libs_env.StaticLibrary('hash', hash_files)
env_clone['LIBS'] += [libhash]

# Fix up flags for hosted builds.
if env['hosted']:
    env_clone['LSCRIPT'] = env.File('#src/system/kernel/core/processor/hosted/kernel.ld')
    wraps = ()
    if not env['hosted_system_malloc']:
        wraps = ('malloc', 'realloc', 'free', 'strchr')
    for wrap in wraps:
        env_clone['LINKFLAGS'] += ['-Wl,-wrap=%s' % wrap]
    env_clone['LINKFLAGS'] += ['-Wl,-T,$LSCRIPT']
    env_clone['LIBS'] += ['rt', 'dl']

for entry in ('memory_tracing', 'bochs', 'track_locks', 'hosted_system_malloc'):
    if env[entry]:
        env_clone.MergeFlags({
            'CPPDEFINES': [entry.upper()],
        })

final_output = objname
stripped_objname = final_output
objname = '%s.debug' % objname

if env['clang_cross'] and env['clang_analyse']:
    stripped_objname = objname
    final_output = stripped_objname
elif env['ARCH_TARGET'] == 'X64':
    # On x86_64, we objcopy a stripped binary into the final kernel binary, so
    # we need to have an intermediate file that gets stripped.
    stripped_objname = '%s.stripped' % (objname,)

# Flatten the file list
files = buildutils.misc.flattenFileLists(files)
kernel = env_clone.Program(objname, files)

if 'KERNEL_LSCRIPT' in env_clone:
    env_clone.Depends(kernel, '#' + env_clone['KERNEL_LSCRIPT'])

if objname != stripped_objname:
    env_clone.Command(stripped_objname, objname,
                      action="$STRIP -d -o $TARGET $SOURCE")

if final_output != stripped_objname:
    action = "$OBJCOPY -I elf64-x86-64 -O elf32-i386 $SOURCE $TARGET"
    env_clone.Command(final_output, stripped_objname, action=action)


def filteredFromSharedLibrary(x):
    names = ('boot-standalone.s', 'trampoline.s')
    return x.name in names

# Build a copy of the kernel as a shared object for module linking
shared_env = env_clone.Clone()
buildutils.misc.removeFromAllFlags(shared_env, ['-mcmodel=kernel'])
# Remove files which don't quite work properly in the shared object.
shared_files = [x for x in files if not filteredFromSharedLibrary(x)] + [env.File('sharedshim.cc')]
shared_env['LIBS'] = []
shared_env.MergeFlags({
    'CCFLAGS': ['-w'],  # No warnings in the shared object build
})
shared_files += x86emu_files + udis_files + hash_files
shared_env.SharedLibrary(kernel_so, shared_files)
