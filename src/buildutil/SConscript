'''
Copyright (c) 2008-2014, Pedigree Developers

Please see the CONTRIB file in the root of the source tree for a full
list of contributors.

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'''

from __future__ import print_function


import os

import SCons

Import(['host_env'])

env = host_env
conf = Configure(env)

KERNEL_DIR = env.Dir('../system/kernel')
APPS_DIR = env.Dir('../user/applications')

# Distinguish build system objects from those built for the target, always.
env['OBJSUFFIX'] = '.build.o'

subdirs = [
    'ext2img',
    'netwrap',
]

if env['instrumentation']:
    subdirs.append('instrument')

if env['memory_tracing']:
    subdirs.append('memorytracer')

if 'LIBGTEST' in env:
    subdirs.append('testsuite')

# Make sure we can find libraries in the build directory.
env.MergeFlags({
    'LIBPATH': [env['BUILDDIR']],
    'CPPDEFINES': ['_POSIX_C_SOURCE=200112L', '_XOPEN_SOURCE=600L'],
})

# Build utility libraries.
header_paths = [
    env.Dir('#src'),
    env.Dir('#src/modules/system'),
    env.Dir('#src/system/include'),
    env.Dir('#src/system/kernel/core'),
]
libutility_sources = [
    os.path.join('utilities', 'String.cc'),
    os.path.join('utilities', 'Cache.cc'),
    os.path.join('utilities', 'List.cc'),
    os.path.join('utilities', 'Vector.cc'),
    os.path.join('utilities', 'Tree.cc'),
    os.path.join('utilities', 'ExtensibleBitmap.cc'),
    os.path.join('utilities', 'ObjectPool.cc'),
    os.path.join('utilities', 'Buffer.cc'),
    os.path.join('utilities', 'utility.cc'),
    os.path.join('utilities', 'UnlikelyLock.cc'),
    os.path.join('utilities', 'RequestQueue.cc'),
    os.path.join('utilities', 'BloomFilter.cc'),
    os.path.join('utilities', 'StaticString.cc'),
    os.path.join('utilities', 'sha1', 'sha1.cc'),
    os.path.join('utilities', 'smhasher', 'MurmurHash3.cpp'),
    os.path.join('core', 'lib', 'demangle.cc'),
    os.path.join('core', 'lib', 'string.c'),
    os.path.join('core', 'lib', 'memory.c'),
    os.path.join('core', 'lib', 'vsprintf.c'),
    os.path.join('core', 'lib', 'SlamAllocator.cc'),
    os.path.join('core', 'processor', 'PhysicalMemoryManager.cc'),
    os.path.join('time', 'Conversion.cc'),
    os.path.join('time', 'Concurrent.cc'),  # Portable, unlike Delay.cc
    os.path.join('network', 'IpAddress.cc'),
    os.path.join('network', 'MacAddress.cc'),
    'Atomic.cc',
    'Log.cc',
]
# Base kernel sources that we care about.
kernel_sources = [
    os.path.join('machine', 'Device.cc'),
    os.path.join('machine', 'DeviceHashTree.cc'),
]
defines = [
    'HOSTED', 'UTILITY_LINUX', 'TARGET_IS_LITTLE_ENDIAN', 'DONT_LOG_TO_SERIAL',
    'PEDIGREE_BENCHMARK', 'STANDALONE_MUTEXES', 'STANDALONE_CACHE',
    'STANDALONE_MEMPOOL', 'DEVICE_IGNORE_ADDRESSES'
]

utility_env = env.Clone()
utility_env.Append(**{
    'CPPPATH': header_paths,
    'CPPDEFINES': defines,
})
utility_env.MergeFlags({
    'CCFLAGS': ['-g3', '-ggdb', '-O3'],
    'COVERAGE_CCFLAGS': ['-g3', '-ggdb', '-O3'],
    'CXXFLAGS': ['-std=c++11'],
    'CFLAGS': ['-std=gnu99'],
})

utility_env.Library('utility',
    ['shim.cc', 'pocketknife.cc'] + [KERNEL_DIR.File(f) for f in libutility_sources])

utility_env.Library('kernel', [KERNEL_DIR.File(f) for f in kernel_sources])

# Build a version of libutility that has the necessary coverage pieces, such
# that we can get code coverage analysis where actual .cc files hold the code
# being tested.
utility_env['OBJSUFFIX'] = '.build.coverage.o'
utility_env['CPPDEFINES'] += ['UTILITY_LINUX_COVERAGE']
utility_env.Library('utility_coverage',
    ['shim.cc', 'pocketknife.cc'] + [KERNEL_DIR.File(f) for f in libutility_sources],
    CCFLAGS=utility_env['COVERAGE_CCFLAGS'])

utility_env.Library('kernel_coverage', [KERNEL_DIR.File(f) for f in kernel_sources])

for subdir in subdirs:
    SConscript(os.path.join(subdir, 'SConscript'), exports=['env'])

# Special rules for keymap, which runs primarily on Pedigree but can be used
# during the build.
keymap_env = env.Clone()
keymap_dir = APPS_DIR.Dir('keymap')
keymaps_dir = keymap_dir.Dir('keymaps')

keymap_env.Append(CPPPATH=[keymap_dir.srcnode()], CPPDEFINES=['NOT_PEDIGREE'])

keymap_lex_sources = [keymap_dir.File('lexer.l')]
keymap_yacc_sources = [keymap_dir.File('parser.y')]
keymap_sources = [keymap_dir.File('main.c')]

keymap_lexer = env.CFile('keymap-lexer.c', keymap_lex_sources)
keymap_parser = env.CFile('keymap-parser.c', keymap_yacc_sources)
keymap = keymap_env.Program('keymap', keymap_sources + [keymap_lexer, keymap_parser])
env.Alias('keymaps', keymap)

# TODO: getopt in keymap to remove these mv's
keymap_target_dir = env['BUILDDIR'].Dir('keymaps')
for entry in env.Dir(keymaps_dir).glob('*', source=True):
    k = env.Command(keymap_target_dir.File(entry.name + '.kmc'), entry,
                '$KEYMAP compile $SOURCE && rm ${SOURCE}.h && '
                'mv ${SOURCE}.kmc $TARGET', KEYMAP=keymap)

    env.Alias('keymaps', k)
