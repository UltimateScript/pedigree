'''
Copyright (c) 2008-2014, Pedigree Developers

Please see the CONTRIB file in the root of the source tree for a full
list of contributors.

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'''

import os

import buildutils.misc
import buildutils.modules
import moduledeps

Import(['env'])

driverdir = env["PEDIGREE_BUILD_DRIVERS"]
moduledir = env["PEDIGREE_BUILD_MODULES"]
imagesdir = env["PEDIGREE_IMAGES_DIR"]

# Common drivers - order is important
driver_common_subdirs = [
    # DMA
    'dma',

    # Pedigree-specific disk I/O
    'ata',
    'partition',

    # Pedigree-specific video
    # 'nvidia',

    # Pedigree-specific NICs
    '3c90x',
    # 'rtl8139',
    # 'loopback',

    # Pedigree-specific SCSI layer
    'scsi',

    # Pedigree-specific HID layer
    'hid',

    # Pedigree-specific USB drivers
    'usb-hcd',
    'usb-hub',
    'usb-mass-storage',
    'usb-hid',

    # Generic FTDI driver (USB serial)
    'ftdi',

    # DM9601 driver (USB ethernet)
    'dm9601',

    # CDI framework (NOT the drivers)
    'cdi',
]

# CDI drivers
cdi_drivers = [
    # CDI NIC drivers
    'e1000',
    'pcnet',
    'rtl8139',
    'sis900',

    # CDI Disk drivers
    # 'floppy' # Needs millisecond granularity in cdi_sleep_ms...
]

# Architecture-specific drivers
if env['ARCH_TARGET'] in ('X86', 'X64'):
    driver_arch = 'x86'
    driver_arch_subdirs = [
        'ib700_wdt',
        'ne2k',
        'pci',
        'ps2mouse',
        'vbe',
        'vmware-gfx',
    ]
elif env['ARCH_TARGET'] == 'PPC':
    driver_arch = 'ppc'
    driver_arch_subdirs = [
        'ata-specific',
        # 'framebuffer',
        'test',
    ]

    # Filter out useless drivers for PPC
    driver_common_subdirs = [x for x in driver_common_subdirs
                             if x not in ['cdi', 'nvidia', 'dma']]
    cdi_drivers = []
elif env['ARCH_TARGET'] == 'ARM':
    driver_arch = 'arm'
    driver_arch_subdirs = [
        'usb-glue',
    ]

    # Filter out useless drivers for ARM
    driver_common_subdirs = [x for x in driver_common_subdirs
                             if x not in ['ata', 'dma', 'cdi', 'nvidia', '3c90x']]
    cdi_drivers = []
elif env['ARCH_TARGET'] == 'HOSTED':
    driver_arch = 'hosted'
    driver_arch_subdirs = [
        'diskimage',
    ]

    # Filter out useless drivers for HOSTED
    driver_common_subdirs = [x for x in driver_common_subdirs
                             if x in ['loopback', 'partition', 'scsi']]
    cdi_drivers = []

# Check for CDI
cdi_dir = env.Dir('.').srcnode().Dir('drivers').Dir('cdi')
if cdi_dir.exists():
    env['cdi_driver_list'] = cdi_drivers
else:
    print('CDI drivers are not present, CDI will not be present in this build.')
    env['cdi_driver_list'] = []
    if 'cdi' in driver_common_subdirs:
        driver_common_subdirs.remove('cdi')

# Modules - order is important
module_subdirs = [
    'vfs',
    'ext2',
    'fat',
    'iso9660',
    'network-stack',
    'console',
    'linker',
    'users',
    'ramfs',
    'rawfs',
    'lodisk',
    'usb',
    'splash',
    'config',
    'status_server',
    'gfx-deps',
    'preload',
    'init',
    'confignics',
    'filesystems',
    'mountroot',
    'nics',
    'lwip',
]

if env['pcap']:
    module_subdirs.append('pcap')

if env['hosted'] or env['ARCH_TARGET'] == 'ARM':
    module_subdirs = [x for x in module_subdirs if x not in ['splash']]

if env['clang_cross']:
    # sqlite is not our code, and it takes a very long time for clang to
    # analyse (and at times has actually ICE'd the compiler).
    module_subdirs.remove('config')

# No difference yet, load all modules
initrd_modules = module_subdirs

drivers = [os.path.join('drivers', driver_arch, i) for i in driver_arch_subdirs]
drivers += [os.path.join('drivers', 'common', i) for i in driver_common_subdirs]
modules = [os.path.join('system', i) for i in module_subdirs]

all_modules = drivers + modules

# Disable a bunch of sqlite3 features to reduce code size (we don't care about
# a lot of this stuff!)
config_omits = [
    'ALTER_TABLE', 'AUTHORIZATION', 'AUTOINIT',
    'AUTOVACUUM', 'BUILTIN_TEST', 'COMPILEOPTION_DIAGS', 'COMPLETE',
    'DECLTYPE', 'DEPRECATED', 'EXPLAIN', 'FLAG_PRAGMAS', 'FLOATING_POINT',
    'INCRBLOB', 'INTEGRITY_CHECK', 'LOAD_EXTENSION', 'LOCALTIME',
    'LOOKASIDE', 'MEMORYDB', 'PROGRESS_CALLBACK',
    'SCHEMA_PRAGMAS', 'SCHEMA_VERSION_PRAGMAS', 'TCL_VARIABLE',
    'TEMPDB', 'TRACE', 'UTF16', 'WAL',
]
config_keeps = [
    'ANALYZE', 'ATTACH', 'AUTOINCREMENT', 'AUTOMATIC_INDEX', 'AUTORESET',
    'BETWEEN_OPTIMIZATION', 'BLOB_LITERAL', 'BTREECOUNT',  'CAST', 'CHECK',
    'COMPOUND_SELECT', 'CTE', 'DATETIME_FUNCS', 'FOREIGN_KEY', 'GET_TABLE',
    'LIKE_OPTIMIZATION', 'OR_OPTIMIZATION', 'PAGER_PRAGMAS', 'PRAGMA',
    'QUICKBALANCE', 'REINDEX', 'SHARED_CACHE', 'SUBQUERY', 'TRIGGER',
    'TRUNCATE_OPTIMIZATION', 'VACUUM', 'VIEW', 'VIRTUALTABLE', 'WSD',
    'XFER_OPT',
]

config_extra_flags = []
for entry in set(config_omits + config_keeps):
    if entry in config_omits:
        config_extra_flags.append('-DSQLITE_OMIT_%s=1' % entry)
    elif entry in config_keeps:
        config_extra_flags.append('-USQLITE_OMIT_%s' % entry)

cdi_extra_flags = []
lwip_extra_flags = []
if env['clang_cross']:
    cdi_extra_flags = [
        '-Wno-old-style-cast',
        '-Wno-vla-extension',
        '-Wno-shift-sign-overflow',
        '-Wno-extended-offsetof',
        '-Wno-language-extension-token',
        '-Wno-cast-align',
        '-Wno-assign-enum',
        '-Wno-gnu-zero-variadic-macro-arguments',
    ]

    lwip_extra_flags = [
        '-Wno-missing-noreturn',
        '-Wno-missing-variable-declarations',
        '-Wno-c++-compat',
        '-Wno-gnu-empty-struct',
        '-Wno-unreachable-code-break',
        '-Wno-cast-align',
    ]

# Custom CFLAGS for specific modules
custom_cflags = {
    'config': ['-DSQLITE_SYSTEM_MALLOC=1',
               '-DSQLITE_OS_OTHER=1',
               '-DSQLITE_THREADSAFE=0',
               '-DSQLITE_TEMP_STORE=3',
               '-DSQLITE_DISABLE_LFS=1',
               '-w', '-Os'] + config_extra_flags
}

# Custom C/C++ flags for specific modules.
custom_ccflags = {
    # Disable -Waddress for lwip as a bunch of its macros trip it up.
    'lwip': ['-Wno-address'] + lwip_extra_flags,
    'cdi': cdi_extra_flags,
    'status_server': ['-Wno-old-style-cast'],
}

# Custom CXXFLAGS for specific modules
custom_cxxflags = {
}

# Custom LINKFLAGS for specific modules.
custom_linkflags = {
}

# Flags from CXXFLAGS and CFLAGS to *remove* for a module
remove_flags = {
    # We always remove -Werror from the config module as sqlite is noisy.
    'config' : ['-ffreestanding', '-fno-builtin', '-Werror', '-O3'],
    # CDI drivers
    'e1000': ['-Werror'],
    'pcnet': ['-Werror'],
    'rtl8139': ['-Werror'],
    'lwip': ['-fvisibility=hidden'],
}

# Try and follow this subdirectory scheme for platform code in modules to
# simplify the custom_subdirs dictionary
arch_subdir = buildutils.misc.stubSuffix(env, dash=False)

def dma_fix(s):
    if s in ('X86', 'X64'):
        return 'X86'
    else:
        return s

# Custom subdirectories for specific modules
custom_subdirs = {
    'dma'           : [dma_fix(env['ARCH_TARGET']).lower()],
    'linker'        : [arch_subdir],
    'lwip'          : ['api', 'core', 'core/ipv4', 'core/ipv6'],
}

# Custom files to add to the file list
custom_files = {
    'linker'        : [os.path.join(arch_subdir, 'asm-' + arch_subdir + '.s')],
    'lwip'          : ['netif/ethernet.c', 'netif/ethernetif.c'],
    'config'        : ['sqlite3/sqlite3.c'],
}

if env['hosted']:
    custom_files['linker'] = []

# Custom include paths for specific modules
custom_incpath = {
    'cdi'           : ['#/src/modules/drivers/common/cdi/include',
                       '#/src/modules/drivers/cdi/include'],
    'status_server' : ['#/src/system/kernel'],
    'init'          : ['#/src/system/kernel', '#/src'],
    'mountroot'     : ['#/src/system/kernel'],
    'splash'        : ['#/src/system/kernel'], # For nogfx
    'linker'        : ['#/src/modules/system/linker'],
    'usb-glue'      : ['#/src/system/kernel/machine/arm_beagle'], # TODO: handle other machine types
    'lwip'          : ['#/src/modules/system/lwip/include'],
    'ps2mouse'      : ['#/src/system/kernel/machine/mach_pc'],
}

# Custom library paths for specific modules
custom_libs = {
}

# Default library paths
default_libpath = [
    imagesdir.Dir('libraries'),
    '.',
]

# Default include paths
default_incpath = [
    '#src',
    '#/src/modules',
    '#/src/system/include',
    '#/src/modules/system',
    '#/src/modules/drivers/common',
    '#/src/modules/system/lwip/include',  # needed for lwip headers
]

env_clone = env.Clone()
env_clone['LIBS'] = []
env_clone['LIBPATH'] = default_libpath
env_clone['CPPPATH'] = default_incpath

# libmodule provides generic support that should be built into every module.
libmodule_env = env_clone.Clone()
libmodule = libmodule_env.StaticLibrary('module', ['Module.cc'])


def buildModule(env, path, outputBase, targetAlias):
    module_env = env.Clone()

    # Handle extra include directories
    base = path
    module = os.path.basename(path)

    custom_include_path = os.path.join(base, 'include')
    if(os.path.exists(custom_include_path)):
        module_env['CPPPATH'] += [custom_include_path]

    module_env['CPPPATH'] += custom_incpath.get(module, [])
    module_env['LIBS'] += custom_libs.get(module, [])
    module_env['MODULE_LINKFLAGS'] = custom_linkflags.get(module, [])
    module_env.MergeFlags({
        'TARGET_CFLAGS': custom_cflags.get(module, []),
        'TARGET_CCFLAGS': custom_ccflags.get(module, []),
        'TARGET_CXXFLAGS': custom_cxxflags.get(module, []),
    })

    # Special define for code that is compiled for user and kernel space.
    module_env.MergeFlags({
        'CPPDEFINES': ['IN_PEDIGREE_KERNEL'],
    })

    buildutils.misc.removeFromAllFlags(
        module_env, set(remove_flags.get(module, [])))

    output = outputBase.File(module + '.o')
    files = [Glob(os.path.join(base, '*.c')), Glob(os.path.join(base, '*.cc'))]
    for d in custom_subdirs.get(module, []):
        files += [
            Glob(os.path.join(base, d, '*.c')),
            Glob(os.path.join(base, d, '*.cc')),
        ]
    for f in custom_files.get(module, []):
        files += [os.path.join(base, f)]

    final_output = output
    unstripped_temporary = output = '%s.debug' % (output,)
    shtarget = '%s.so' % (module,)

    # Need to build the dependency list recursively
    base_depends_list = set(moduledeps.expandDependencies(
        moduledeps.module_dependencies.get(module, ())))

    buildutils.modules.buildModule(module_env, final_output,
                                   unstripped_temporary, files,
                                   depends=base_depends_list,
                                   shtarget=shtarget)

    env.Alias(targetAlias, final_output)

for module in modules:
    buildModule(env_clone, module, moduledir, 'modules')

for driver in drivers:
    buildModule(env_clone, driver, driverdir, 'drivers')

# Special handling for CDI drivers
env_clone['CPPPATH'] += ['#/src/modules/drivers/common/cdi/include',
                         '#/src/modules/drivers/cdi/include']

for cdi_driver in cdi_drivers:
    cdi_env = env_clone.Clone()

    # Hide warnings for CDI drivers, as it's not our code.
    ccflags = custom_ccflags.get(cdi_driver, [])
    ccflags.append('-w')
    custom_ccflags[cdi_driver] = ccflags

    if env['clang_cross']:
        # Remove specific warnings that break with Clang & CDI
        custom_ccflags[cdi_driver] += cdi_extra_flags

    cdi_env.MergeFlags({'CCFLAGS': custom_ccflags[cdi_driver]})

    # Patch up the path and add any include directory to the path
    cdi_driver = os.path.join('drivers', 'cdi', cdi_driver)
    incdir = env.Dir(os.path.join('#src', 'modules', cdi_driver, 'include'))
    if os.path.exists(incdir.abspath):
        cdi_env['CPPPATH'] += [incdir]
    buildModule(cdi_env, cdi_driver, driverdir, 'drivers')

# Ready to generate the initrd...
builddir = env["PEDIGREE_BUILD_BASE"]
initrdFile = env["PEDIGREE_BUILD_BASE"].File("initrd.tar")

# initrd lists

# Ensure graphics drivers are loaded before splash
initrdList = []
forceModuleOrder = ['config', 'pci', 'vbe', 'vmware-gfx', 'gfx-deps', 'splash']
all_drivers = driver_arch_subdirs + driver_common_subdirs + cdi_drivers
for module in forceModuleOrder:
    if module in initrd_modules:
        initrdList += [os.path.join(builddir.abspath, 'modules', module + '.o')]
        initrd_modules.remove(module)
    elif module in all_drivers:
        initrdList += [os.path.join(builddir.abspath, 'drivers', module + '.o')]
        all_drivers.remove(module)

# Add all drivers.
# TODO: Installation should detect hardware and install a custom initrd with
# 		only the necessary drivers to boot up (and then drivers should be
#		loaded on-demand or something)
initrdList += [os.path.join(builddir.abspath, 'drivers', i + '.o') for i in all_drivers]

# Only some modules are actually needed for the actual boot of the system
# The rest can be loaded via some form of autoload mechanism (run in the init
# module perhaps?) or on demand via modload.
initrdList += [os.path.join(builddir.abspath, 'modules', i + '.o') for i in initrd_modules]

# Subsystems
initrdList += [os.path.join(builddir.abspath, 'subsys', 'posix', 'posix.o')]
initrdList += [os.path.join(builddir.abspath, 'subsys', 'pedigree-c', 'pedigree-c.o')]
if 'NATIVE_SUBSYSTEM' in env['EXTRA_CONFIG']:
    initrdList += [os.path.join(builddir.abspath, 'subsys', 'native', 'kernel', 'native.o')]

env.Depends(initrdFile, "drivers")
env.Depends(initrdFile, "modules")
env.Depends(initrdFile, "subsys")

env.Alias("initrd", initrdFile)

if('STATIC_DRIVERS' in env['CPPDEFINES']):
    env.Depends("kernel", initrdList) # Kernel depends on all drivers/modules
    env['INITRD_LIST'] = initrdList
elif not (env['clang_cross'] and env['clang_analyse']):
    env.CreateTar(initrdFile, initrdList)
