'''
Copyright (c) 2008-2014, Pedigree Developers

Please see the CONTRIB file in the root of the source tree for a full
list of contributors.

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'''


import os
import pipes

import buildutils.misc
import buildutils.modules
import buildutils.userspace
import buildutils.fs
import buildutils.libs

Import(['env', 'userspace_env'])

env_clone = env.Clone()
userspace_env_clone = userspace_env.Clone()

builddir = env["PEDIGREE_BUILD_BASE"]
kerneldir = env["PEDIGREE_BUILD_KERNEL"]
moduledir = env["PEDIGREE_BUILD_MODULES"]
subsysdir = env["PEDIGREE_BUILD_SUBSYS"]
imagesdir = env["PEDIGREE_IMAGES_DIR"]

posix_objname = subsysdir.File('posix.o')

glue_objname = builddir.File('libpedigree-glue.a')

libpthread_objname = builddir.File('libpthread.a')
libpthread_shobjname = builddir.File('libpthread.so')

crt0_objname = kerneldir.File('crt0.o')
crti_objname = kerneldir.File('crti.o')
crtn_objname = kerneldir.File('crtn.o')

libpedigree_c_objname = builddir.File('libpedigree-c.a')
libpedigree_c_shobjname = builddir.File('libpedigree-c.so')

libvdso_shobjname = builddir.File('libvdso.so')

env.Alias("subsys", posix_objname)
if not env['posix_musl']:
    libc_objname = builddir.File('libc.so')

    env.Alias("crt", [crt0_objname, crti_objname, crtn_objname])
    env.Alias("pthreads", libpthread_objname)
    env.Alias("pthreads", libpthread_shobjname)
    env.Alias("subsys", glue_objname)

    if env['build_libs']:
        env.Depends(libc_objname, "crt")
        env.Depends(libc_objname, glue_objname)
        env.Depends(libc_objname, libpedigree_c_objname)
else:
    libc_objname = builddir.Dir('musl').Dir('lib').File('libc.so')

if env['build_libs']:
    env.Depends(libpedigree_c_shobjname, libc_objname)
    env.Depends(libvdso_shobjname, libc_objname)

# To include new files just add to the list, or Glob("*.cpp")
posix_files = [
    Glob("*.cc"),
    'vsyscall-amd64.s',  # TODO: fix this up for other architectures
]

glue_files = [
    'glue.c',
    'glue-sysconf.c',
    'glue-fseek.c',
    'glue-fpurge.c',
    'glue-scandir.c',
    'glue-dlmalloc.c',
    'glue-strcasecmp.c',
    'glue-utmpx.c',
    'glue-memset.c',
    'glue-setlocale.c',
]

if 'CUSTOM_MEMCPY' in userspace_env['EXTRA_CONFIG']:
    glue_files.extend(['glue-memcpy.c'])

crt0_files = ['crt0.c']

suffix = buildutils.misc.stubSuffix(userspace_env)

posix_files += ["sigret" + suffix + ".s"]
glue_files += ["setjmp" + suffix + ".s"]

pthread_files = ['glue-pthread.c']

vdso_files = [
    env.File('glue-infoblock.c'),
    env.File('glue-infoblock.ld'),
    env.File('vdso.ld'),
]

# CRTI/CRTN
crti_files = ["crti" + suffix + ".s"]
crtn_files = ["crtn" + suffix + ".s"]

# To include a new directory for includes, just add it to the list
include = [
    '#src',
    builddir.Dir('musl').Dir('include'),
    '#src/subsys/posix/syscalls',
    # '#src/subsys/posix/include',
    '#/src/modules',
    '#/src/system/include',
    '#/src/modules/system',
    '#/src/modules/system/lwip/include',
    '#/src/subsys/pedigree-c',
    '#src/subsys/posix',
    ".",  # build directory
    # Last attempt for missing files is in the disk image's /include
    # os.path.join(imagesdir, 'include'),
]

# To add a library path add to the list below
libpaths = [
	builddir
]

####################################
env_clone['CPPPATH'] = include
env_clone['LIBS'] = []
env_clone['LIBPATH'] = []

final_output = posix_objname
posix_objname = '%s.debug' % (posix_objname,)

env_clone['AS'] = userspace_env_clone['AS']
env_clone['ASFLAGS'] = userspace_env_clone['ASFLAGS']
env_clone.MergeFlags({
    'CPPDEFINES': ['_POSIX_C_SOURCE=200112L', '_XOPEN_SOURCE=600'],
    'TARGET_CCFLAGS': ['-Wno-undef', '-Wno-parentheses'],
})
env_clone['CPPPATH'].append('#src/system/kernel')  # Version.h
buildutils.modules.buildModule(env_clone, final_output, posix_objname, posix_files)

posix_env = userspace_env_clone.Clone()
posix_env['CPPPATH'] = include
posix_env['LIBPATH'] = libpaths
posix_env['CFLAGS'] = buildutils.userspace.fixFlags(userspace_env_clone, posix_env['CFLAGS'])
posix_env['CCFLAGS'] = buildutils.userspace.fixFlags(userspace_env_clone, posix_env['CCFLAGS'])
posix_env['CXXFLAGS'] = buildutils.userspace.fixFlags(userspace_env_clone, posix_env['CXXFLAGS'])

pic_clone = posix_env.Clone()
pic_clone.MergeFlags('-fPIC -DUSE_PIC_SYSCALLS')

# TODO: rip out stdint.h, make sure GCC target provides it.

if not env['posix_musl']:
    pic_clone.Library(glue_objname, glue_files)

    # No libraries needed for CRT0
    pic_clone.Program(crt0_objname, crt0_files, LINKFLAGS='-nostdlib -Wl,-r')

    # CRTI
    pic_clone.Program(crti_objname, crti_files, LINKFLAGS='-nostdlib -Wl,-r')

    # CRTN
    pic_clone.Program(crtn_objname, crtn_files, LINKFLAGS='-nostdlib -Wl,-r')

    # libpthread
    if env['build_libs']:
        env_clone_pthread = pic_clone.Clone()
        env_clone_pthread.Library(libpthread_objname, pthread_files)
        env_clone_pthread.SharedLibrary(libpthread_shobjname, pthread_files,
                                        LINKFLAGS='')

    env.Alias("crt0", "crt")

# Build libc/libm

buildDir = env_clone.Dir(builddir)

base = env_clone.Dir("#")
baseLibc = builddir.File('stock-libg.a')
baseLibm = builddir.File('stock-libm.a')
baseInclude = env_clone.Dir("#src/subsys/posix/include")

buildLibc = builddir.File('libc.so')
buildLibm = builddir.File('libm.so')
buildLibcA = builddir.File('libc.a')
buildLibmA = builddir.File('libm.a')
buildInclude = builddir.Dir('include-posix')

if env['posix_musl']:
    SConscript(os.path.join('musl', 'SConscript'), exports=['userspace_env'])
else:
    # Install updated headers to the local images directory. Newlib depends on
    # them, rather than the provided-with-newlib headers.
    buildutils.fs.install_tree(
        env.Dir(os.path.join(imagesdir, 'include')), baseInclude, env, 'headers')

    # TODO(miselin): we really should be able to build libc on Pedigree. Fix this.
    if env['build_libs'] and not env['ON_PEDIGREE']:
        buildutils.libs.buildLibc(userspace_env_clone, baseLibc, glue_objname)
        buildutils.libs.buildLibm(userspace_env_clone, baseLibm)

        env.Alias("libs", [buildLibc, buildLibm])

        SConscript(os.path.join('newlib', 'SConscript'), exports=['userspace_env'])

# Build the VDSO object.
vdso_env_clone = posix_env.Clone()
vdso_env_clone.MergeFlags('-fPIC -mcmodel=small')
vdso = vdso_env_clone.SharedLibrary(libvdso_shobjname, vdso_files[0],
        LINKFLAGS=['-Wl,-soname,linux-vdso.so.1',
                   '-Wl,--version-script,$VERSIONSCRIPT',
                   '-Wl,--hash-style=both',
                   '-Wl,-Bsymbolic',
                   '-nostdlib',
                   '-Wl,-T$LINKERSCRIPT',
                   ],
        VERSIONSCRIPT=vdso_files[1],
        LINKERSCRIPT=vdso_files[2])


def create_vdso_h(target, source, env):
    source = source[0].path

    with open(source, 'rb') as fs:
        fs_data = fs.read()

        with open(target[0].path, 'w') as fd:
            fd.write('const unsigned char __vdso_so[] = {')
            for b in fs_data:
                if isinstance(b, str):
                    b = ord(b)
                fd.write('0x%02x,' % (b,))
            fd.write('};\n')

            fd.write('const int __vdso_so_len = %d;' % (len(fs_data),))
            fd.write('const int __vdso_so_pages = %d;' % (
                (len(fs_data) + 0x1000) / 0x1000,))


# Turn the shared library into a header file.
env.Command('vdso.h', vdso, Action(create_vdso_h, env.get('TARCOMSTR')))
